"""
AI-Driven Composer Agent - Generates dynamic Figma components based on design analysis
"""

import json
from typing import Dict, Any, List, Optional
from pydantic import BaseModel
from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from backend.agents.planner_agent import PageSpec, Section
from backend.agents.reference_agent import DesignSystem
from backend.agents.design_analysis_agent import DesignAnalysis

class ImageSlot(BaseModel):
    role: str
    prompt: str
    aspectRatio: str
    styleHints: Dict[str, Any]

class FigmaComponentSpec(BaseModel):
    """Dynamic Figma component specification generated by AI"""
    name: str
    type: str  # FRAME, TEXT, RECTANGLE, etc.
    properties: Dict[str, Any]
    children: Optional[List['FigmaComponentSpec']] = None

class GeneratedPageComponents(BaseModel):
    """Complete page with AI-generated components"""
    pageName: str
    components: List[FigmaComponentSpec]
    imageSlots: List[ImageSlot]
    totalNodes: int
    designReasoning: str

class AIComposerAgent:
    def __init__(self, llm_client: ChatOpenAI):
        self.llm = llm_client
        
        self.composition_prompt = ChatPromptTemplate.from_messages([
            ("system", """You are an expert Figma component designer and frontend developer. Generate detailed Figma component specifications that create beautiful, cohesive web designs.

FIGMA COMPONENT STRUCTURE:
Each component must have:
- name: Descriptive component name
- type: FRAME, TEXT, RECTANGLE, ELLIPSE, GROUP
- properties: Object with Figma API-compliant properties
- children: Array of child components (for containers)

FIGMA API PROPERTIES (use exact property names):
LAYOUT PROPERTIES:
- layoutMode: "NONE" | "HORIZONTAL" | "VERTICAL"
- primaryAxisSizingMode: "FIXED" | "AUTO"  
- counterAxisSizingMode: "FIXED" | "AUTO"
- paddingTop, paddingRight, paddingBottom, paddingLeft: number
- itemSpacing: number
- x, y: number (positioning)
- width, height: number (sizing)

VISUAL PROPERTIES:
- fills: Array of paint objects
  - Solid: {{"type": "SOLID", "color": {{"r": 0.5, "g": 0.5, "b": 0.5}}}}
  - Gradient: {{"type": "GRADIENT_LINEAR", "gradientTransform": [[1,0,0],[0,1,0]], "gradientStops": [{{"position": 0, "color": {{"r":1,"g":1,"b":1,"a":1}}}}, {{"position": 1, "color": {{"r":0,"g":0,"b":0,"a":1}}}}]}}
- strokes: Array of paint objects  
- strokeWeight: number
- cornerRadius: number
- effects: Array of effect objects
  - Shadow: {{"type": "DROP_SHADOW", "color": {{"r":0,"g":0,"b":0,"a":0.2}}, "offset": {{"x":0,"y":2}}, "radius": 4, "visible": true}}

TEXT PROPERTIES:
- fontName: {{"family": "Inter", "style": "Regular"}}
- fontSize: number
- letterSpacing: {{"value": 0, "unit": "PIXELS"}}
- lineHeight: {{"value": 1.5, "unit": "PERCENT"}} 
- characters: string (text content)
- textAlignHorizontal: "LEFT" | "CENTER" | "RIGHT"
- textAlignVertical: "TOP" | "CENTER" | "BOTTOM"

DESIGN PRINCIPLES:
1. Create responsive, auto-layout containers using HORIZONTAL/VERTICAL layout modes
2. Use consistent spacing based on the design system
3. Apply colors that match the aesthetic and brand personality
4. Create proper visual hierarchy with typography and spacing
5. Add subtle effects (shadows, gradients) that enhance the aesthetic
6. Ensure all components work together cohesively
7. Generate components that look professional and polished

COMPONENT GENERATION RULES:
- Always use RGB values between 0-1 (divide by 255)
- Include proper auto-layout properties for responsive design
- Create nested component structures for complex layouts
- Use the design analysis to determine colors, fonts, spacing, and style
- Generate components that match the target audience and brand personality
- Include hover states and interactive elements where appropriate

Generate a complete page structure with all necessary components to create a beautiful, functional website."""),
            
            ("human", """Generate Figma components for this page specification using the AI-analyzed design system:

PAGE SPECIFICATION:
{page_spec}

DESIGN ANALYSIS:
{design_analysis}

USER REQUIREMENTS:
{user_requirements}

Create detailed Figma component specifications that:
1. Implement the exact colors, fonts, and spacing from the design analysis
2. Match the aesthetic style and brand personality determined by AI
3. Create proper visual hierarchy and layout structure
4. Include all necessary components for a complete, professional website
5. Use the design reasoning to ensure consistency and cohesiveness

Return a JSON structure with complete component specifications that will render beautifully in Figma.""")
        ])

    async def generate_figma_components(
        self,
        page_spec: PageSpec,
        design_analysis: DesignAnalysis,
        user_requirements: str
    ) -> GeneratedPageComponents:
        """Generate dynamic Figma components based on AI design analysis"""
        
        try:
            # Format inputs for the AI
            page_spec_text = self._format_page_spec(page_spec)
            design_analysis_text = self._format_design_analysis(design_analysis)
            
            # Generate components using AI
            formatted_prompt = self.composition_prompt.format_messages(
                page_spec=page_spec_text,
                design_analysis=design_analysis_text,
                user_requirements=user_requirements
            )
            response = await self.llm.ainvoke(formatted_prompt)
            
            # Parse AI response into component specifications
            components_data = self._parse_component_response(response.content, design_analysis)
            
            return GeneratedPageComponents(**components_data)
            
        except Exception as e:
            print(f"Component generation failed: {e}")
            return self._generate_fallback_components(page_spec, design_analysis)

    def _format_page_spec(self, page_spec: PageSpec) -> str:
        """Format page specification for AI prompt"""
        sections_text = []
        for section in page_spec.sections:
            sections_text.append(f"- {section.type}: {section.props}")
        
        return f"""
Page Name: {page_spec.pageName}
Sections:
{chr(10).join(sections_text)}
Assets: {page_spec.assets}
"""

    def _format_design_analysis(self, analysis: DesignAnalysis) -> str:
        """Format design analysis for AI prompt"""
        return f"""
COLORS:
- Primary: {analysis.primary_color}
- Secondary: {analysis.secondary_color}
- Accent: {analysis.accent_color}
- Text: {analysis.text_color}
- Text Muted: {analysis.text_muted_color}
- Background: {analysis.background_color}
- Surface: {analysis.surface_color}

TYPOGRAPHY:
- Heading Font: {analysis.heading_font_family} {analysis.heading_font_weight}
- Body Font: {analysis.body_font_family} {analysis.body_font_weight}
- H1 Size: {analysis.h1_size}px
- H2 Size: {analysis.h2_size}px
- H3 Size: {analysis.h3_size}px
- Body Size: {analysis.body_size}px

LAYOUT:
- Base Spacing: {analysis.base_spacing}px
- Section Padding: {analysis.section_padding}px
- Component Padding: {analysis.component_padding}px
- Border Radius: {analysis.border_radius}px
- Container Width: {analysis.container_width}px

AESTHETIC:
- Style: {analysis.aesthetic_style}
- Mood: {analysis.mood}
- Visual Weight: {analysis.visual_weight}
- Shadow Intensity: {analysis.shadow_intensity}
- Button Style: {analysis.button_style}
- Card Style: {analysis.card_style}
- Header Style: {analysis.header_style}

REASONING: {analysis.design_reasoning}
TARGET AUDIENCE: {analysis.target_audience_analysis}
BRAND PERSONALITY: {analysis.brand_personality}
"""

    def _parse_component_response(self, llm_response: str, design_analysis: DesignAnalysis) -> Dict[str, Any]:
        """Parse AI response into component specifications"""
        
        extraction_prompt = ChatPromptTemplate.from_messages([
            ("system", """Extract component specifications from the design response.

Return ONLY a JSON object with this structure:
{
    "pageName": "Page Name",
    "components": [
        {
            "name": "Component_Name",
            "type": "FRAME",
            "properties": {
                "layoutMode": "VERTICAL",
                "width": 1200,
                "height": 600,
                "fills": [{"type": "SOLID", "color": {"r": 1, "g": 1, "b": 1}}],
                "paddingTop": 40,
                "paddingRight": 40,
                "paddingBottom": 40,
                "paddingLeft": 40,
                "itemSpacing": 24
            },
            "children": [...]
        }
    ],
    "imageSlots": [
        {
            "role": "hero",
            "prompt": "Professional image prompt",
            "aspectRatio": "16:9",
            "styleHints": {"style": "professional", "mood": "trustworthy"}
        }
    ],
    "totalNodes": 0,
    "designReasoning": "Explanation of design decisions"
}

Ensure all RGB values are between 0-1, all properties use exact Figma API names, and components create a cohesive, beautiful design."""),
            ("human", f"Component response to parse:\n{llm_response}")
        ])
        
        try:
            formatted_prompt = extraction_prompt.format_messages()
            extraction_response = self.llm.invoke(formatted_prompt)
            # Extract JSON from response
            json_text = self._extract_json_from_text(extraction_response.content)
            component_data = json.loads(json_text)
            
            # Validate and count nodes
            component_data["totalNodes"] = self._count_total_nodes(component_data["components"])
            
            return component_data
            
        except Exception as e:
            print(f"Failed to parse component response: {e}")
            return self._generate_fallback_component_data(design_analysis)

    def _extract_json_from_text(self, text: str) -> str:
        """Extract JSON from AI response text"""
        import re
        json_match = re.search(r'\{.*\}', text, re.DOTALL)
        if json_match:
            return json_match.group(0)
        return text

    def _count_total_nodes(self, components: List[Dict]) -> int:
        """Count total nodes in component tree"""
        count = 0
        for component in components:
            count += 1
            if component.get("children"):
                count += self._count_total_nodes(component["children"])
        return count

    def _generate_fallback_components(self, page_spec: PageSpec, design_analysis: DesignAnalysis) -> GeneratedPageComponents:
        """Generate fallback components if AI fails"""
        
        components = []
        image_slots = []
        
        # Generate components based on page spec and design analysis
        for section in page_spec.sections:
            if section.type == "Header":
                components.append(self._create_header_component(design_analysis))
            elif section.type == "Hero":
                components.append(self._create_hero_component(section.props, design_analysis))
                image_slots.append(self._create_hero_image_slot(section.props))
            elif section.type == "Features":
                components.append(self._create_features_component(section.props, design_analysis))
            elif section.type == "CTA":
                components.append(self._create_cta_component(section.props, design_analysis))
        
        return GeneratedPageComponents(
            pageName=page_spec.pageName,
            components=components,
            imageSlots=image_slots,
            totalNodes=self._count_total_nodes([c.__dict__ for c in components]),
            designReasoning=f"Generated components using {design_analysis.aesthetic_style} aesthetic with {design_analysis.mood} mood"
        )

    def _hex_to_rgb(self, hex_color: str) -> Dict[str, float]:
        """Convert hex color to Figma RGB (0-1 range)"""
        hex_color = hex_color.lstrip('#')
        if len(hex_color) != 6:
            return {"r": 0.5, "g": 0.5, "b": 0.5}
        
        try:
            r = int(hex_color[0:2], 16) / 255
            g = int(hex_color[2:4], 16) / 255
            b = int(hex_color[4:6], 16) / 255
            return {"r": r, "g": g, "b": b}
        except:
            return {"r": 0.5, "g": 0.5, "b": 0.5}

    def _create_header_component(self, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create dynamic header based on design analysis"""
        
        return FigmaComponentSpec(
            name="Header_Dynamic",
            type="FRAME",
            properties={
                "layoutMode": "HORIZONTAL",
                "primaryAxisSizingMode": "AUTO",
                "counterAxisSizingMode": "FIXED",
                "width": design.container_width,
                "paddingTop": design.component_padding,
                "paddingRight": design.section_padding,
                "paddingBottom": design.component_padding,
                "paddingLeft": design.section_padding,
                "itemSpacing": design.base_spacing * 4,
                "fills": [{"type": "SOLID", "color": self._hex_to_rgb(design.background_color)}],
                "effects": self._get_header_effects(design) if design.shadow_intensity != "none" else []
            },
            children=[
                self._create_logo_component(design),
                self._create_nav_component(design),
                self._create_cta_button_component("Get Started", design)
            ]
        )

    def _create_hero_component(self, props: Dict, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create dynamic hero based on design analysis"""
        
        return FigmaComponentSpec(
            name="Hero_Dynamic",
            type="FRAME",
            properties={
                "layoutMode": "HORIZONTAL",
                "primaryAxisSizingMode": "AUTO",
                "counterAxisSizingMode": "FIXED",
                "width": design.container_width,
                "paddingTop": design.section_padding,
                "paddingRight": design.section_padding,
                "paddingBottom": design.section_padding,
                "paddingLeft": design.section_padding,
                "itemSpacing": design.base_spacing * 8,
                "fills": [{"type": "SOLID", "color": self._hex_to_rgb(design.background_color)}]
            },
            children=[
                self._create_hero_content(props, design),
                self._create_hero_image_placeholder(design)
            ]
        )

    def _create_hero_content(self, props: Dict, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create hero content section"""
        
        return FigmaComponentSpec(
            name="Hero_Content",
            type="FRAME",
            properties={
                "layoutMode": "VERTICAL",
                "primaryAxisSizingMode": "AUTO",
                "width": design.container_width // 2,
                "itemSpacing": design.base_spacing * 3,
                "paddingTop": 0,
                "paddingRight": 0,
                "paddingBottom": 0,
                "paddingLeft": 0
            },
            children=[
                FigmaComponentSpec(
                    name="Hero_Title",
                    type="TEXT",
                    properties={
                        "characters": props.get("title", "Transform Your Business"),
                        "fontName": {"family": design.heading_font_family, "style": design.heading_font_weight},
                        "fontSize": design.h1_size,
                        "fills": [{"type": "SOLID", "color": self._hex_to_rgb(design.text_color)}],
                        "textAlignHorizontal": "LEFT"
                    }
                ),
                FigmaComponentSpec(
                    name="Hero_Subtitle",
                    type="TEXT",
                    properties={
                        "characters": props.get("subtitle", "Professional solutions for modern challenges"),
                        "fontName": {"family": design.body_font_family, "style": design.body_font_weight},
                        "fontSize": design.body_size + 2,
                        "fills": [{"type": "SOLID", "color": self._hex_to_rgb(design.text_muted_color)}],
                        "textAlignHorizontal": "LEFT"
                    }
                ),
                self._create_cta_button_component(props.get("cta", "Get Started"), design)
            ]
        )

    def _create_cta_button_component(self, text: str, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create dynamic CTA button based on design analysis"""
        
        button_properties = {
            "layoutMode": "HORIZONTAL",
            "primaryAxisSizingMode": "AUTO",
            "paddingTop": design.component_padding // 2,
            "paddingRight": design.component_padding,
            "paddingBottom": design.component_padding // 2,
            "paddingLeft": design.component_padding,
            "itemSpacing": design.base_spacing,
            "fills": [{"type": "SOLID", "color": self._hex_to_rgb(design.primary_color)}],
            "cornerRadius": self._get_button_radius(design)
        }
        
        # Add effects based on design analysis
        if design.shadow_intensity != "none":
            button_properties["effects"] = self._get_button_effects(design)
        
        return FigmaComponentSpec(
            name=f"Button_{text.replace(' ', '_')}",
            type="FRAME",
            properties=button_properties,
            children=[
                FigmaComponentSpec(
                    name=f"Button_Text_{text.replace(' ', '_')}",
                    type="TEXT",
                    properties={
                        "characters": text,
                        "fontName": {"family": design.body_font_family, "style": "Bold"},
                        "fontSize": design.body_size,
                        "fills": [{"type": "SOLID", "color": {"r": 1, "g": 1, "b": 1}}]
                    }
                )
            ]
        )

    def _get_button_radius(self, design: DesignAnalysis) -> int:
        """Get button corner radius based on design style"""
        if design.button_style == "pill":
            return 999
        elif design.button_style == "square":
            return 0
        elif design.button_style == "rounded":
            return design.border_radius
        else:
            return design.border_radius

    def _get_header_effects(self, design: DesignAnalysis) -> List[Dict]:
        """Get header shadow effects based on design analysis"""
        if design.shadow_intensity == "subtle":
            return [{"type": "DROP_SHADOW", "color": {"r": 0, "g": 0, "b": 0, "a": 0.08}, "offset": {"x": 0, "y": 1}, "radius": 3, "visible": True}]
        elif design.shadow_intensity == "medium":
            return [{"type": "DROP_SHADOW", "color": {"r": 0, "g": 0, "b": 0, "a": 0.12}, "offset": {"x": 0, "y": 2}, "radius": 8, "visible": True}]
        elif design.shadow_intensity == "strong":
            return [{"type": "DROP_SHADOW", "color": {"r": 0, "g": 0, "b": 0, "a": 0.18}, "offset": {"x": 0, "y": 4}, "radius": 16, "visible": True}]
        return []

    def _get_button_effects(self, design: DesignAnalysis) -> List[Dict]:
        """Get button shadow effects"""
        primary_rgb = self._hex_to_rgb(design.primary_color)
        shadow_color = {**primary_rgb, "a": 0.3}
        
        if design.shadow_intensity == "subtle":
            return [{"type": "DROP_SHADOW", "color": shadow_color, "offset": {"x": 0, "y": 2}, "radius": 4, "visible": True}]
        elif design.shadow_intensity == "medium":
            return [{"type": "DROP_SHADOW", "color": shadow_color, "offset": {"x": 0, "y": 4}, "radius": 12, "visible": True}]
        elif design.shadow_intensity == "strong":
            return [{"type": "DROP_SHADOW", "color": shadow_color, "offset": {"x": 0, "y": 6}, "radius": 20, "visible": True}]
        return []

    def _create_logo_component(self, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create logo placeholder"""
        return FigmaComponentSpec(
            name="Logo",
            type="RECTANGLE",
            properties={
                "width": 120,
                "height": 40,
                "fills": [{"type": "SOLID", "color": self._hex_to_rgb(design.primary_color)}],
                "cornerRadius": design.border_radius // 2
            }
        )

    def _create_nav_component(self, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create navigation component"""
        return FigmaComponentSpec(
            name="Navigation",
            type="FRAME",
            properties={
                "layoutMode": "HORIZONTAL",
                "primaryAxisSizingMode": "AUTO",
                "itemSpacing": design.base_spacing * 4
            },
            children=[
                FigmaComponentSpec(
                    name=f"Nav_{item}",
                    type="TEXT",
                    properties={
                        "characters": item,
                        "fontName": {"family": design.body_font_family, "style": "Medium"},
                        "fontSize": design.body_size,
                        "fills": [{"type": "SOLID", "color": self._hex_to_rgb(design.text_color)}]
                    }
                ) for item in ["Home", "Services", "About", "Contact"]
            ]
        )

    def _create_hero_image_placeholder(self, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create hero image placeholder"""
        return FigmaComponentSpec(
            name="Hero_Image",
            type="RECTANGLE",
            properties={
                "width": design.container_width // 2,
                "height": 400,
                "fills": [{"type": "SOLID", "color": self._hex_to_rgb(design.surface_color)}],
                "cornerRadius": design.border_radius
            }
        )

    def _create_hero_image_slot(self, props: Dict) -> ImageSlot:
        """Create hero image slot for AI generation"""
        return ImageSlot(
            role="hero",
            prompt=f"Professional hero image for {props.get('title', 'business website')}, high quality, modern",
            aspectRatio="16:9",
            styleHints={"style": "professional", "mood": "trustworthy", "quality": "high"}
        )

    def _create_features_component(self, props: Dict, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create features section"""
        # Implementation for features component
        pass

    def _create_cta_component(self, props: Dict, design: DesignAnalysis) -> FigmaComponentSpec:
        """Create CTA section"""
        # Implementation for CTA component
        pass

    def _generate_fallback_component_data(self, design: DesignAnalysis) -> Dict[str, Any]:
        """Generate fallback component data"""
        return {
            "pageName": "AI Generated Page",
            "components": [],
            "imageSlots": [],
            "totalNodes": 0,
            "designReasoning": "Fallback generation due to AI parsing failure"
        }